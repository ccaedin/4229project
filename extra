    glDisable(GL_DEPTH_TEST);
    glDisable(GL_LIGHTING);
    arial.RenderText("Commands: c", Text::WHITE, -aspect + 5, w_height - 25);
    if (show_commands)
    {
        arial.RenderText("f: Fullscreen", Text::WHITE, -aspect + 5, w_height - 50);
        arial.RenderText("m/M: Change projection", Text::WHITE, -aspect + 5, w_height - 75);
        arial.RenderText("1/2: Change speed", Text::WHITE, -aspect + 5, w_height - 100);
        arial.RenderText("Arrow Keys: Move camera", Text::WHITE, -aspect + 5, w_height - 125);
        arial.RenderText("Mouse: Change view", Text::WHITE, -aspect + 5, w_height - 150);
        arial.RenderText("-/=: Ambient", Text::WHITE, -aspect + 5, w_height - 175);
        arial.RenderText("l: Toggle Lighting", Text::WHITE, -aspect + 5, w_height - 200);
        arial.RenderText("k: Toggle Smooth", Text::WHITE, -aspect + 5, w_height - 225);
        arial.RenderText("j: Toggle Local Viewer", Text::WHITE, -aspect + 5, w_height - 250);
        arial.RenderText("n: Toggle Normals", Text::RED, -aspect + 5, w_height - 275);
        arial.RenderText("p: Pause Sun/Moon", Text::WHITE, -aspect + 5, w_height - 300);
        arial.RenderText("r/R: Reset Sun/Moon", Text::WHITE, -aspect + 5, w_height - 325);
        arial.RenderText("w/W: Sun Distance", Text::WHITE, -aspect + 5, w_height - 350);
        arial.RenderText("a/A: Ambient", Text::WHITE, -aspect + 5, w_height - 375);
        arial.RenderText("s/S: Specular", Text::WHITE, -aspect + 5, w_height - 400);
        arial.RenderText("d/D: Diffuse", Text::WHITE, -aspect + 5, w_height - 425);
        arial.RenderText("g: Grab Mouse", Text::WHITE, -aspect + 5, w_height - 450);



    }
    // print the mode
    std::string mode_text = "Projection: " + projection_names[projection];
    arial.RenderText(mode_text, Text::WHITE, -aspect + 5, 25);
    std::string speed_text = "Speed: " + std::to_string(camera.GetSpeed());
    arial.RenderText(speed_text, Text::WHITE, -aspect + 5, 50);
    std::string light = "Ambient: " + std::to_string(ambient) + " Diffuse: " + std::to_string(diffuse) + " Specular: " + std::to_string(specular) + " Shine: " + std::to_string(shine) + " View: " + (local_viewer ? "Local" : "Global");
    arial.RenderText(light, Text::WHITE, -aspect + 5, 75);
    std::string time = "Time: " + std::to_string(time_day);
    arial.RenderText(time, Text::WHITE, -aspect + 5, 100);
    glEnable(GL_DEPTH_TEST);
    glColor3f(1, 1, 1);
    glBegin(GL_LINES);
    // draw x
    glColor3f(1, 0, 0);
    glVertex3f(0, 0, 0);
    glVertex3f(0.5, 0, 0);
    // draw y
    glColor3f(0, 1, 0);
    glVertex3f(0, 0, 0);
    glVertex3f(0, 0.5, 0);
    // draw z
    glColor3f(0, 0, 1);
    glVertex3f(0, 0, 0);
    glVertex3f(0, 0, 0.5);
    glEnd();

    bool Mesh::loadOBJ(
	const char * path, 
	std::vector<glm::vec3> & out_vertices, 
	std::vector<glm::vec2> & out_uvs,
	std::vector<glm::vec3> & out_normals
){
	printf("Loading OBJ file %s...\n", path);

	std::vector<unsigned int> vertexIndices, uvIndices, normalIndices;
	std::vector<glm::vec3> temp_vertices; 
	std::vector<glm::vec2> temp_uvs;
	std::vector<glm::vec3> temp_normals;


	FILE * file = fopen(path, "r");
	if( file == NULL ){
		printf("Impossible to open the file ! Are you in the right path ? See Tutorial 1 for details\n");
		getchar();
		return false;
	}

	while( 1 ){

		char lineHeader[128];
		// read the first word of the line
		int res = fscanf(file, "%s", lineHeader);
		if (res == EOF)
			break; // EOF = End Of File. Quit the loop.

		// else : parse lineHeader
		
		if ( strcmp( lineHeader, "v" ) == 0 ){
			glm::vec3 vertex;
			fscanf(file, "%f %f %f\n", &vertex.x, &vertex.y, &vertex.z );
			temp_vertices.push_back(vertex);
		}else if ( strcmp( lineHeader, "vt" ) == 0 ){
			glm::vec2 uv;
			fscanf(file, "%f %f\n", &uv.x, &uv.y );
			// uv.y = -uv.y; // Invert V coordinate since we will only use DDS texture, which are inverted. Remove if you want to use TGA or BMP loaders.
            temp_uvs.push_back(uv);
		}else if ( strcmp( lineHeader, "vn" ) == 0 ){
			glm::vec3 normal;
			fscanf(file, "%f %f %f\n", &normal.x, &normal.y, &normal.z );
			temp_normals.push_back(normal);
		}else if ( strcmp( lineHeader, "f" ) == 0 ){
			std::string vertex1, vertex2, vertex3;
			unsigned int vertexIndex[3], uvIndex[3], normalIndex[3];
			int matches = fscanf(file, "%d/%d/%d %d/%d/%d %d/%d/%d\n", &vertexIndex[0], &uvIndex[0], &normalIndex[0], &vertexIndex[1], &uvIndex[1], &normalIndex[1], &vertexIndex[2], &uvIndex[2], &normalIndex[2] );
			if (matches != 9){
				printf("File can't be read by our simple parser :-( Try exporting with other options\n");
				fclose(file);
				return false;
			}
			vertexIndices.push_back(vertexIndex[0]);
			vertexIndices.push_back(vertexIndex[1]);
			vertexIndices.push_back(vertexIndex[2]);
			uvIndices    .push_back(uvIndex[0]);
			uvIndices    .push_back(uvIndex[1]);
			uvIndices    .push_back(uvIndex[2]);
			normalIndices.push_back(normalIndex[0]);
			normalIndices.push_back(normalIndex[1]);
			normalIndices.push_back(normalIndex[2]);
		}else{
			// Probably a comment, eat up the rest of the line
			char stupidBuffer[1000];
			fgets(stupidBuffer, 1000, file);
		}

	}

	// For each vertex of each triangle
	for( unsigned int i=0; i<vertexIndices.size(); i++ ){

		// Get the indices of its attributes
		unsigned int vertexIndex = vertexIndices[i];
		unsigned int uvIndex = uvIndices[i];
		unsigned int normalIndex = normalIndices[i];
		
		// Get the attributes thanks to the index
		glm::vec3 vertex = temp_vertices[ vertexIndex-1 ];
		glm::vec2 uv = temp_uvs[ uvIndex-1 ];
		glm::vec3 normal = temp_normals[ normalIndex-1 ];
		
		// Put the attributes in buffers
		out_vertices.push_back(vertex);
		out_uvs     .push_back(uv);
		out_normals .push_back(normal);
	
	}

	//print out the vertices
    std::cout << "Vertices: " << std::endl;
    for(auto v : out_vertices)
    {
        std::cout << "glm::vec3(" << v.x << ", " << v.y << ", " << v.z << ")," << std::endl;
    }
    std::cout << "UVs: " << std::endl;
    for(auto v : out_uvs)
    {
        std::cout << "glm::vec2(" << v.x << ", " << v.y << ")," << std::endl;
    }
    std::cout << "Normals: " << std::endl;
    for(auto v : out_normals)
    {
        std::cout << "glm::vec3(" << v.x << ", " << v.y << ", " << v.z << ")," << std::endl;
    }

	fclose(file);
	return true;
}
void Mesh::loadMesh(std::string path) {
    //if the path is an obj
    if(path.find(".obj") != std::string::npos)
    {
        if(!loadOBJ(path.c_str(), vertices, uvs, normals))
        {
            SDL_Log("Error: Could not load obj file %s\n", path.c_str());
            return;
        }

    }
    else
    {
        SDL_Log("Error: Could not load obj file %s\n", path.c_str());
        return;
    }
    //if vertices uv and normals are not empty
    if(vertices.size() < 1 || uvs.size() < 1 || normals.size() < 1)
    {
        SDL_Log("Error: Vertices empty %s\n", path.c_str());
        return;
    }
    //compute the tangent and bitangen
    setupMesh(vertices, uvs, normals);


}